<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE boost_serialization>
<boost_serialization signature="serialization::archive" version="9">
<ScenarioScripts class_id="0" tracking_level="0" version="0">
	<count>2</count>
	<item_version>0</item_version>
	<item class_id="1" tracking_level="0" version="0">
		<first>PatriotAirDefense</first>
		<second class_id="2" tracking_level="0" version="8">
			<myScriptId>PatriotAirDefense</myScriptId>
			<myMenuText>PatriotAirDefense</myMenuText>
			<myToolTip></myToolTip>
			<myMenuIcon></myMenuIcon>
			<myVersion>1</myVersion>
			<myScriptEngine>lua</myScriptEngine>
			<myComments></myComments>
			<myMenuLocations class_id="3" tracking_level="0" version="0">
				<count>1</count>
				<item_version>0</item_version>
				<item>$(menutext)</item>
			</myMenuLocations>
			<myIsSystemScript>0</myIsSystemScript>
			<myDescription>Radar does the detection, ECS brings in those spotreports and determines the targets for the launchers and send text Msg to each launch with its target to fire at</myDescription>
			<myScriptLocation></myScriptLocation>
			<myDirectoryPath>Ground Warfare</myDirectoryPath>
			<myEntityTypes>
				<count>1</count>
				<item_version>0</item_version>
				<item>1:1:225:28:2:2:1</item>
			</myEntityTypes>
			<myVariables>
				<count>4</count>
				<item_version>0</item_version>
				<item>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot; ?&gt;
&lt;!DOCTYPE boost_serialization&gt;
&lt;boost_serialization signature=&quot;serialization::archive&quot; version=&quot;9&quot;&gt;
&lt;DtScriptedTaskVariable class_id=&quot;0&quot; tracking_level=&quot;0&quot; version=&quot;3&quot;&gt;
	&lt;myVariableName&gt;TargetTypes&lt;/myVariableName&gt;
	&lt;myType&gt;entitytypes&lt;/myType&gt;
	&lt;myLabel&gt;Target Types&lt;/myLabel&gt;
	&lt;myToolTip&gt;Entity type of desired targets&lt;/myToolTip&gt;
	&lt;myDefaultValue&gt;&lt;/myDefaultValue&gt;
	&lt;myRangeBottom&gt;-100000&lt;/myRangeBottom&gt;
	&lt;myRangeTop&gt;100000&lt;/myRangeTop&gt;
	&lt;myVariableData&gt;&lt;/myVariableData&gt;
	&lt;myVisible&gt;1&lt;/myVisible&gt;
	&lt;myIndent&gt;0&lt;/myIndent&gt;
	&lt;myInternal&gt;0&lt;/myInternal&gt;
&lt;/DtScriptedTaskVariable&gt;
</item>
				<item>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot; ?&gt;
&lt;!DOCTYPE boost_serialization&gt;
&lt;boost_serialization signature=&quot;serialization::archive&quot; version=&quot;9&quot;&gt;
&lt;DtScriptedTaskVariable class_id=&quot;0&quot; tracking_level=&quot;0&quot; version=&quot;3&quot;&gt;
	&lt;myVariableName&gt;DefenseArea&lt;/myVariableName&gt;
	&lt;myType&gt;simulationobject&lt;/myType&gt;
	&lt;myLabel&gt;Defense Area&lt;/myLabel&gt;
	&lt;myToolTip&gt;Area within which the launchers will fire on targets&lt;/myToolTip&gt;
	&lt;myDefaultValue&gt;Areas&lt;/myDefaultValue&gt;
	&lt;myRangeBottom&gt;-100000&lt;/myRangeBottom&gt;
	&lt;myRangeTop&gt;100000&lt;/myRangeTop&gt;
	&lt;myVariableData&gt;DtAreasFilter&lt;/myVariableData&gt;
	&lt;myVisible&gt;1&lt;/myVisible&gt;
	&lt;myIndent&gt;0&lt;/myIndent&gt;
	&lt;myInternal&gt;0&lt;/myInternal&gt;
&lt;/DtScriptedTaskVariable&gt;
</item>
				<item>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot; ?&gt;
&lt;!DOCTYPE boost_serialization&gt;
&lt;boost_serialization signature=&quot;serialization::archive&quot; version=&quot;9&quot;&gt;
&lt;DtScriptedTaskVariable class_id=&quot;0&quot; tracking_level=&quot;0&quot; version=&quot;3&quot;&gt;
	&lt;myVariableName&gt;AvailableLaunchers&lt;/myVariableName&gt;
	&lt;myType&gt;simulationobjects&lt;/myType&gt;
	&lt;myLabel&gt;Available Launchers&lt;/myLabel&gt;
	&lt;myToolTip&gt;Launchers that can be given targets to shoot down&lt;/myToolTip&gt;
	&lt;myDefaultValue&gt;All Entities&lt;/myDefaultValue&gt;
	&lt;myRangeBottom&gt;-100000&lt;/myRangeBottom&gt;
	&lt;myRangeTop&gt;100000&lt;/myRangeTop&gt;
	&lt;myVariableData&gt;DtAllEntitiesFilter&lt;/myVariableData&gt;
	&lt;myVisible&gt;1&lt;/myVisible&gt;
	&lt;myIndent&gt;0&lt;/myIndent&gt;
	&lt;myInternal&gt;0&lt;/myInternal&gt;
&lt;/DtScriptedTaskVariable&gt;
</item>
				<item>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot; ?&gt;
&lt;!DOCTYPE boost_serialization&gt;
&lt;boost_serialization signature=&quot;serialization::archive&quot; version=&quot;9&quot;&gt;
&lt;DtScriptedTaskVariable class_id=&quot;0&quot; tracking_level=&quot;0&quot; version=&quot;3&quot;&gt;
	&lt;myVariableName&gt;Powerunit&lt;/myVariableName&gt;
	&lt;myType&gt;simulationobject&lt;/myType&gt;
	&lt;myLabel&gt;Power unit&lt;/myLabel&gt;
	&lt;myToolTip&gt;Unit that supplies power to the battery&lt;/myToolTip&gt;
	&lt;myDefaultValue&gt;All Land&lt;/myDefaultValue&gt;
	&lt;myRangeBottom&gt;-100000&lt;/myRangeBottom&gt;
	&lt;myRangeTop&gt;100000&lt;/myRangeTop&gt;
	&lt;myVariableData&gt;DtAllLandFilter&lt;/myVariableData&gt;
	&lt;myVisible&gt;1&lt;/myVisible&gt;
	&lt;myIndent&gt;0&lt;/myIndent&gt;
	&lt;myInternal&gt;0&lt;/myInternal&gt;
&lt;/DtScriptedTaskVariable&gt;
</item>
			</myVariables>
			<myScript>-- This script template has each of the script entry point functions.
-- They are described in detail in VR-Forces Configuration Guide.

-- Some basic VRF Utilities defined in a common module.
require &quot;vrfutil&quot;

-- Global Variables. Global variables get saved when a scenario gets checkpointed.
-- They get re-initialized when a checkpointed scenario is loaded.
availableLaunchers = {}
invalidLaunchers = {}
assignedTargets = {}
awaitingText = {}
onHold = false
taskId = -1
totalNumLaunchers = 0
assignedLaunchers = 0
-- Task Parameters Available in Script
--  taskParameters.TargetTypes Type: String List of Entity Types - Entity type of desired targets
--  taskParameters.DefenseArea Type: SimObject - Area within which the launchers will fire on targets
--  taskParameters.AvailableLaunchers Type: SimObjects - Launchers that can be given targets to shoot down
--  taskParameters.Powerunit Type:SimObject--Unit that provided power to the battery 

-- Called when the task first starts. Never called again.
function init()
   -- Set the tick period for this script.
   vrf:setTickPeriod(0.5)
   setupAvailableLaunchers()
end

function setupAvailableLaunchers()
   for i, launcher in ipairs(taskParameters.AvailableLaunchers) do
	availableLaunchers[launcher:getUUID()] = launcher
	totalNumLaunchers = totalNumLaunchers + 1
   end
   if next(availableLaunchers) == nil then
        printWarn(vrf:trUtf8(&quot;Patriot Air Defense: No available Patriot launchers&quot;))
	vrf:endTask(false)
   end
end

-- Called each tick while this task is active.
function tick()
   --Check our rules of engagment, if not fire at will go on hold
    if not (this:getRulesOfEngagement () == &quot;fire-at-will&quot; ) then
        if ( onHold ==false ) then
	   --Broadcast clear engagements
	   taskId = vrf:startSubtask(&quot;send-text&quot;, {destination_name =&quot;DtBroadcast&quot;,text = &quot;hold-fire&quot;})
	   onHold = true
	end
        return
    end
    
    --if our power grid is down we&apos;re done too--go on hold
    if ( taskParameters.Powerunit:isDestroyed() ) then 
       if ( onHold ==false ) then
	   --Broadcast clear engagements
	   taskId = vrf:startSubtask(&quot;send-text&quot;, {destination_name =&quot;DtBroadcast&quot;,text = &quot;hold-fire&quot;})
	   onHold = true
	end
        return
    end
    
   --if we were on hold, set to false since passed above checks
   if ( onHold ==true ) then
      --reset
      onHold =  false
   end
    
   --todo get all hostiles in ascending range from us--Shoot closest first
   --These will be spot reports since we dont have a sensor
   local targets = {}
   findTargets(targets)
    if ((assignedLaunchers == 0) and (next(targets) == nil ) )then
         return
    end
    --So seems it takes a couple ticks to send out a text message
    --so don&apos;t go assigning anyone till you&apos;re done with the current
    --one
   if ( (assignedLaunchers&lt; totalNumLaunchers) and (#awaitingText ==0)) then
       --Go thru the targets and assign them.
       assignTargets(targets)
    end

    if (taskId ==-1 ) and #awaitingText &gt;0 then
       local index = next(awaitingText)
       local tar = awaitingText[index]
       sendAssignments(tar)
       printDebug(&quot;text sent&quot;)
    end
    if vrf:isTaskComplete(taskId) then
      --We&apos;re ready to send the next text or start assigning more
      taskId =-1
    end

   -- endTask() causes the current task to end once the current tick is complete. tick() will not be called again.
   -- Wrap it in an appropriate test for completion of the task.
   --Currently this is a continuous task
   --vrf:endTask(true)

end

function findTargets(validTargets)
   local contactList=this:getAllHostileContacts()
   local target
   local dead = false
   local assignedIndex = nil

   for i, target in pairs(contactList) do
      local targetType = target:getEntityType()
      if target:isDestroyed() then
         dead = true
      else
          dead = false
      end
         --If the target is destroyed, remove it from our assigned targets
      assignedIndex = findAssignedTarget(assignedTargets,target:getUUID())
      if  assignedIndex ~= &quot;&quot; then
         if dead then
	    -- Might need to send a clear although reactive launcher task should
	    -- clear automatically if target is dead
	    assignedTargets[assignedIndex] = nil
	  end
	 --Regardless this target is spoken for so don&amp;apos;t add to the target list
      else
         if  targetMatch(targetType)  and not dead and
            taskParameters.DefenseArea:isPointInside(
            target:getLocation3D())then
	    --We have a valid target insert into our target list
	    printDebug(&quot;valid target&quot;, target:getName())
	    validTargets[target:getUUID()] = target
         end
       end      
   end
end

function targetMatch(targetType)
   local match = false
   local j = 1
   for j,type in ipairs(taskParameters.TargetTypes) do
      if vrf:entityTypeMatches(targetType,type) then
         match=true
	 break
      end
   end
   return match
end

function assignTargets(targets)
   local launcher = nil
   local tgt =nil
   --go thru targets and find an available launcher for them
   for p,tgt in pairs(targets) do
      launcher = findClosestLauncher(tgt)
      if launcher ~= nil then
         assignedTargets[launcher:getUUID()] = tgt
	 assignedLaunchers = assignedLaunchers + 1
         table.insert(awaitingText,tgt)
	 printDebug(&quot;assign &quot;,launcher:getName())
	 printDebug(&quot;target &quot;,tgt:getName())
	 --Be sure to remove this target from our list
      else
          --No point in going thru more targets we&apos;re out of launchers
          break      
      end
   end
end

function findClosestLauncher(tgt)
   local launcher = nil
   local bestLauncher = nil
   for id,launcher in pairs(availableLaunchers) do
      --is this launcher free?
      if ( validLauncher(launcher) ) then
         if ( assignedTargets[launcher:getUUID()] == nil) then
            local closestTgt = nil
            local closestRange =1e10
	    local targetLoc = tgt:getLocation3D()
            local targetRange = launcher:getLocation3D():distanceToLocation3D(
                  targetLoc)
	    if ( targetRange &lt; closestRange ) then
	       closestRange = targetRange
	       bestLauncher = launcher
	    end
         end
      end
    end
    return bestLauncher
end

function validLauncher(launcher)
   --Is it destroyed?
   local bret  = true
   if ( launcher:isDestroyed() or not launcher:isValid() ) then
      bret = false
   end
   --Next check if incapicated--i.e. out of ammo,comms down,etc
   if ( invalidLaunchers[launcher:getUUID()] ~=nil ) then
      --launcher is no good
      bret = false
   end
   return bret
end

function sendAssignments(tar)
    --now we send the launcher a text with the target
      local mess = &quot;Fire&quot;..tar:getName()
      printInfo(mess)
      --look up launcher
      local uuid =findAssignedTarget(assignedTargets,tar:getUUID())
      if uuid ~=&quot;&quot;  then
         local launcher = nil
         launcher = vrf:getSimObjectByUUID(uuid)
	taskId = vrf:startSubtask(&quot;send-text&quot;, {destination_name = launcher,text = mess})
         table.remove(awaitingText,1)
      end
end

function findAssignedTarget(assignedTargets,id)
   local launcherUuid = &quot;&quot;
   for uuid, tgt in pairs(assignedTargets) do
        if (tgt:getUUID() == id) then
	   launcherUuid  = uuid
	   break
	end
   end
   return launcherUuid
end

function clearAssignment(launcher)
   printDebug(&quot;clear assign&quot;)
   assignedTargets[launcher:getUUID()] = nil
   assignedLaunchers = assignedLaunchers - 1
end

-- Called when this task is being suspended, likely by a reaction activating.
function suspend()
   -- By default, halt all subtasks and other entity tasks started by this task when suspending.
   vrf:stopAllSubtasks()
   vrf:stopAllTasks()
end

-- Called when this task is being resumed after being suspended.
function resume()
   -- By default, simply call init() to start the task over.
   init()
end

-- Called immediately before a scenario checkpoint is saved when
-- this task is active.
-- It is typically not necessary to add code to this function.
function saveState()
end

-- Called immediately after a scenario checkpoint is loaded in which
-- this task is active.
-- It is typically not necessary to add code to this function.
function loadState()
end


-- Called when this task is ending, for any reason.
-- It is typically not necessary to add code to this function.
function shutdown()
end

-- Called whenever the entity receives a text report message while
-- this task is active.
--   message is the message text string.
--   sender is the SimObject which sent the message.
function receiveTextMessage(message, sender)
   --A launcher has become available
   if ( message ==&quot;free&quot; ) then
      if ( invalidLaunchers[sender:getUUID()] ~=nil ) then
         --This launcher is available again
	 invalidLaunchers[sender:getUUID()] = nil
      else
         clearAssignment(sender)
      end
   end
   --Launcher is out of commission
   if ( message == &quot;no ammo&quot; ) then
      --We unassign the launcher
      clearAssignment(sender)
      --and place on invalid list
      invalidLaunchers[sender:getUUID()] = sender
   end
end
</myScript>
			<myActionCategories></myActionCategories>
			<myShowInMenu>1</myShowInMenu>
			<myEncrypted>0</myEncrypted>
			<myScriptType>1</myScriptType>
			<myDoctrines></myDoctrines>
			<myFlags>1</myFlags>
			<myShowInToolbar>0</myShowInToolbar>
			<myToolbarLocation></myToolbarLocation>
			<myExtendedMenuText></myExtendedMenuText>
		</second>
	</item>
	<item>
		<first>Patriot_Launcher_attack</first>
		<second>
			<myScriptId>Patriot_Launcher_attack</myScriptId>
			<myMenuText>Patriot_Launcher_attack</myMenuText>
			<myToolTip></myToolTip>
			<myMenuIcon></myMenuIcon>
			<myVersion>1</myVersion>
			<myScriptEngine>lua</myScriptEngine>
			<myComments></myComments>
			<myMenuLocations>
				<count>1</count>
				<item_version>0</item_version>
				<item>$(menutext)</item>
			</myMenuLocations>
			<myIsSystemScript>0</myIsSystemScript>
			<myDescription></myDescription>
			<myScriptLocation></myScriptLocation>
			<myDirectoryPath>Ground Warfare</myDirectoryPath>
			<myEntityTypes>
				<count>1</count>
				<item_version>0</item_version>
				<item>1:1:225:28:2:2:2</item>
			</myEntityTypes>
			<myVariables>
				<count>2</count>
				<item_version>0</item_version>
				<item>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot; ?&gt;
&lt;!DOCTYPE boost_serialization&gt;
&lt;boost_serialization signature=&quot;serialization::archive&quot; version=&quot;9&quot;&gt;
&lt;DtScriptedTaskVariable class_id=&quot;0&quot; tracking_level=&quot;0&quot; version=&quot;3&quot;&gt;
	&lt;myVariableName&gt;reactivetask_priority&lt;/myVariableName&gt;
	&lt;myType&gt;integer&lt;/myType&gt;
	&lt;myLabel&gt;&lt;/myLabel&gt;
	&lt;myToolTip&gt;The priority of this reactive task&lt;/myToolTip&gt;
	&lt;myDefaultValue&gt;5&lt;/myDefaultValue&gt;
	&lt;myRangeBottom&gt;-100000&lt;/myRangeBottom&gt;
	&lt;myRangeTop&gt;100000&lt;/myRangeTop&gt;
	&lt;myVariableData&gt;&lt;/myVariableData&gt;
	&lt;myVisible&gt;0&lt;/myVisible&gt;
	&lt;myIndent&gt;0&lt;/myIndent&gt;
	&lt;myInternal&gt;1&lt;/myInternal&gt;
&lt;/DtScriptedTaskVariable&gt;
</item>
				<item>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot; ?&gt;
&lt;!DOCTYPE boost_serialization&gt;
&lt;boost_serialization signature=&quot;serialization::archive&quot; version=&quot;9&quot;&gt;
&lt;DtScriptedTaskVariable class_id=&quot;0&quot; tracking_level=&quot;0&quot; version=&quot;3&quot;&gt;
	&lt;myVariableName&gt;reactivetask_enabled&lt;/myVariableName&gt;
	&lt;myType&gt;checkbox&lt;/myType&gt;
	&lt;myLabel&gt;&lt;/myLabel&gt;
	&lt;myToolTip&gt;Whether or not this reactive task is enabled&lt;/myToolTip&gt;
	&lt;myDefaultValue&gt;1&lt;/myDefaultValue&gt;
	&lt;myRangeBottom&gt;-100000&lt;/myRangeBottom&gt;
	&lt;myRangeTop&gt;100000&lt;/myRangeTop&gt;
	&lt;myVariableData&gt;&lt;/myVariableData&gt;
	&lt;myVisible&gt;0&lt;/myVisible&gt;
	&lt;myIndent&gt;0&lt;/myIndent&gt;
	&lt;myInternal&gt;1&lt;/myInternal&gt;
&lt;/DtScriptedTaskVariable&gt;
</item>
			</myVariables>
			<myScript>-- This script template has each of the script entry point functions.
-- They are described in detail in VR-Forces Configuration Guide.

-- Some basic VRF Utilities defined in a common module.
require &quot;vrfutil&quot;

-- Global Variables. Global variables get saved when a scenario gets checkpointed.
-- They get re-initialized when a checkpointed scenario is loaded.
targetName=&quot;&quot;
taskId = -1
state = &quot;free&quot;
myController = &quot;&quot;
myLauncherSystem = nil
-- Task Parameters Available in Script


-- Called when reactive task is enabled or changes to the enabled state.
function checkInit()
   -- Set the tick period for this script while checking.
   vrf:setTickPeriod(0.5)
end

-- Called each tick period for this script while enabled but not in the active state.
function check()
   -- Returning true will cause the reactive task to become active and will call init()
   -- and tick() until the task completes.
   --if we are in a state of no ammo, check for resupply
   local current,full = this:getResourceAmounts(&quot;weapon|PAC-3-missile&quot;)
  if ( current &lt;= 0 ) then
      state = &quot;no ammo&quot;
    return true;
   else 
      if (targetName:len() &gt;0) then
         state = &quot;awaitingTarget&quot;
         return true
      end
  end
   return false
end

-- Called when the task first starts. Never called again.
function init()
   myLauncherSystem = this:getSystem(&quot;weapon&quot;)
   -- Set the tick period for this script.
   vrf:setTickPeriod(0.5)
   taskId = -1
end

-- Called each tick while this task is active.
function tick()
   if ( state == &quot;no ammo&quot; ) then
      if ( haveAmmo() ) then
         clear(&quot;free&quot;)
	 state = &quot;clearing&quot;
      end
   end
   
   if ( state == &quot;clearing&quot; ) then
      if ( vrf:isTaskComplete(taskId) )then
         -- we&apos;ve sent the  text message to our controller
	 state = &quot;free&quot;
	 targetName=&quot;&quot;
	 taskId = -1
	 printDebug(&quot;task complete&quot;)
	 vrf:endTask(true)
      end
   end
   
   if (state == &quot;awaitingTarget&quot; ) then
      if ( taskId == -1 ) and validTgt() then
         -- do we have ammo left to shoot?
         if ( haveAmmo() ) then
            taskId = vrf:startSubtask(&quot;fire-at-target&quot;, {
               target = targetName,  
               weapon_to_fire =&quot;Patriot Missile Launcher&quot;})
            state=&quot;firing&quot;	 
         else
            clear(&quot;no ammo&quot;)
         end
      end
   end
   
   if (state ==&quot;firing&quot;) then
      if ( vrf:isTaskComplete(taskId) ) then
         -- we need to wait until the missile either hits or
	 if ( myLauncherSystem ) then
	    local isPassed = myLauncherSystem:getAttribute(
                &quot;passed-target&quot;)
	    if ( isPassed ) then
               clear(&quot;free&quot;)   
	       state = &quot;clearing&quot;
	    else
	       --check if target is destroyed
	       local target = vrf:getSimObjectByName (targetName)
	       if (target and target:isDestroyed() ) then
                  clear(&quot;free&quot;)   
	          state = &quot;clearing&quot;
	       end
	    end
	 end
	 
      end
   end
end

function haveAmmo()
   local current,full = this:getResourceAmounts(&quot;weapon|PAC-3-missile&quot;)
   if ( current &lt;= 0 ) then
      --We have no missiles
      state = &quot;no ammo&quot;
      return false
   end
   return true
end

function validTgt()
   --look up target
      local tgt = vrf:getSimObjectByName(targetName)
      if (tgt:isValid()) and (not tgt:isDestroyed()) then
         return true
      else
         --invalid target send clear
	 clear(&quot;free&quot;)
	 state = &quot;clearing&quot;
	 return false
      end
end

function clear(msg)
   --Send text back to parent so we know this launcher is free again
   taskId = vrf:startSubtask( &quot;send-text&quot;, {destination_name = myController,text =msg})
   printDebug(&quot;send text&quot;)
end

-- Called when this task is being suspended, likely by a reaction activating.
function suspend()
   -- By default, halt all subtasks and other entity tasks started by this task when suspending.
   vrf:stopAllSubtasks()
   vrf:stopAllTasks()
end

-- Called when this task is being resumed after being suspended.
function resume()
   -- By default, simply call init() to start the task over.
   init()
end

-- Called immediately before a scenario checkpoint is saved when
-- this task is active.
-- It is typically not necessary to add code to this function.
function saveState()
end

-- Called immediately after a scenario checkpoint is loaded in which
-- this task is active.
-- It is typically not necessary to add code to this function.
function loadState()
end


-- Called when this task is ending, for any reason.
-- It is typically not necessary to add code to this function.
function shutdown()
end

-- Called whenever the entity receives a text report message while
-- this task is active.
--   message is the message text string.
--   sender is the SimObject which sent the message.
function receiveTextMessage(message, sender)
   if string.find(message,&quot;Fire&quot;) ~= nil then
          local i,j =string.find(message,&quot;Fire&quot;)
          --Now get the target
          targetName = string.sub(message,j+1)
          printInfo(&quot;firing at&quot;,targetName)
	  myController = sender:getName()
	  taskId = -1
	  state = &quot;awaitingTarget&quot;
   end
   if ( message == &quot;hold-fire&quot;) then
      clear(&quot;free&quot;)
   end
end



-- Called when a reactive task is disabled (check will no longer called)
-- It is typically not necessary to add code to this function.
function disable()
end
</myScript>
			<myActionCategories></myActionCategories>
			<myShowInMenu>1</myShowInMenu>
			<myEncrypted>0</myEncrypted>
			<myScriptType>2</myScriptType>
			<myDoctrines></myDoctrines>
			<myFlags>1</myFlags>
			<myShowInToolbar>0</myShowInToolbar>
			<myToolbarLocation></myToolbarLocation>
			<myExtendedMenuText></myExtendedMenuText>
		</second>
	</item>
</ScenarioScripts>
</boost_serialization>

