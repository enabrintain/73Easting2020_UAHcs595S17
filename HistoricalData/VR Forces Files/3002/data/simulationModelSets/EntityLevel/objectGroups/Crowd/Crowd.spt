<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE boost_serialization>
<boost_serialization signature="serialization::archive" version="9">
<ScenarioScripts class_id="0" tracking_level="0" version="0">
	<count>1</count>
	<item_version>0</item_version>
	<item class_id="1" tracking_level="0" version="0">
		<first>randomizeCrowd</first>
		<second class_id="2" tracking_level="0" version="8">
			<myScriptId>randomizeCrowd</myScriptId>
			<myMenuText>randomizeCrowd</myMenuText>
			<myToolTip></myToolTip>
			<myMenuIcon></myMenuIcon>
			<myVersion>1</myVersion>
			<myScriptEngine>lua</myScriptEngine>
			<myComments></myComments>
			<myMenuLocations class_id="3" tracking_level="0" version="0">
				<count>1</count>
				<item_version>0</item_version>
				<item>$(menutext)&lt;Other/</item>
			</myMenuLocations>
			<myIsSystemScript>0</myIsSystemScript>
			<myDescription></myDescription>
			<myScriptLocation></myScriptLocation>
			<myDirectoryPath></myDirectoryPath>
			<myEntityTypes>
				<count>1</count>
				<item_version>0</item_version>
				<item>11:-1:-1:-1:-1:-1:-1</item>
			</myEntityTypes>
			<myVariables>
				<count>1</count>
				<item_version>0</item_version>
				<item>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot; ?&gt;
&lt;!DOCTYPE boost_serialization&gt;
&lt;boost_serialization signature=&quot;serialization::archive&quot; version=&quot;9&quot;&gt;
&lt;DtScriptedTaskVariable class_id=&quot;0&quot; tracking_level=&quot;0&quot; version=&quot;3&quot;&gt;
	&lt;myVariableName&gt;wanderArea&lt;/myVariableName&gt;
	&lt;myType&gt;simulationobject&lt;/myType&gt;
	&lt;myLabel&gt;Wander Area&lt;/myLabel&gt;
	&lt;myToolTip&gt;&lt;/myToolTip&gt;
	&lt;myDefaultValue&gt;Areas&lt;/myDefaultValue&gt;
	&lt;myRangeBottom&gt;-100000&lt;/myRangeBottom&gt;
	&lt;myRangeTop&gt;100000&lt;/myRangeTop&gt;
	&lt;myVariableData&gt;DtAreasFilter&lt;/myVariableData&gt;
	&lt;myVisible&gt;1&lt;/myVisible&gt;
	&lt;myIndent&gt;0&lt;/myIndent&gt;
	&lt;myInternal&gt;0&lt;/myInternal&gt;
&lt;/DtScriptedTaskVariable&gt;
</item>
			</myVariables>
			<myScript>-- This script template has each of the script entry point functions.
-- They are described in detail in VR-Forces Configuration Guide.

-- Some basic VRF Utilities defined in a common module.
require &quot;vrfutil&quot;

-- Global Variables. Global variables get saved when a scenario gets checkpointed.
-- They get re-initialized when a checkpointed scenario is loaded.
deletedSubs = {}

-- Task Parameters Available in Script


-- Called when the task first starts. Never called again.
function init()
end

-- Called each tick while this task is active.
function tick()
end


-- Called when this task is being suspended, likely by a reaction activating.
function suspend()
   -- By default, halt all subtasks and other entity tasks started by this task when suspending.
   vrf:stopAllSubtasks()
   vrf:stopAllTasks()
end

-- Called when this task is being resumed after being suspended.
function resume()
   -- By default, simply call init() to start the task over.
   init()
end

-- Called immediately before a scenario checkpoint is saved when
-- this task is active.
-- It is typically not necessary to add code to this function.
function saveState()
end

function tooClose(testSub, testLocation, threshold)
   local subordinates = this:getSubordinates()
   for i, sub in ipairs(subordinates) do
      if (sub ~= testSub) then
         if (sub:getLocation3D():distanceToLocation3D(testLocation) &lt;= threshold) then
           printVerbose(testSub:getName(), &quot; is too close to &quot;, sub:getName())
           return true
         end
      end
   end
   return false
end

function randomDelete()
   local subordinates = this:getSubordinates()
   for i, sub in ipairs(subordinates) do
      if (math.random(1, 10) == 10) then
         printWarn(&quot;Delete &quot;, sub:getName())
         vrf:deleteObject(sub)
         deletedSubs[sub] = true
      end
   end
end

-- Called immediately after a scenario checkpoint is loaded in which
-- this task is active.
-- It is typically not necessary to add code to this function.
function loadState()
   
   --randomly delete some entities
   randomDelete()
   
   local subordinates = this:getSubordinates()
   
   for i,sub in ipairs(subordinates) do
      
      if (deletedSubs[sub] == nil) then
    
         --randomize position
         local randomizedLocation = Location3D(0, 0, 0)
         
         --find a suitable new position
	 tries = 0
         repeat
            randomizedLocation = sub:getLocation3D()
            local range = 2 * math.random()
            local bearing = math.rad(math.random(1,360))
            local offset = Vector3D(0.0, 0.0, 0.0)
            offset:setBearingInclRange(bearing, 0.0, range)
            randomizedLocation = randomizedLocation:addVector3D(offset)
	    tries = tries + 1
         until (not tooClose(sub, randomizedLocation, 0.5) or tries &gt; 10)
         
         --set the position
	 if (tries &lt; 11) then
	    vrf:sendSetData(sub, &quot;set-location&quot;, {location=randomizedLocation})
         end
	 
         vrf:sendTask(sub, &quot;wander&quot;, {isIndefinite=0, movementMode=1, area=taskParameters.wanderArea}, false)
         
         vrf:sendSetData(sub, &quot;set-heading&quot;, {heading=math.rad(math.random(1,360))})
         
      end
   end
      
   vrf:endTask(true)
end


-- Called when this task is ending, for any reason.
-- It is typically not necessary to add code to this function.
function shutdown()
end

-- Called whenever the entity receives a text report message while
-- this task is active.
--   message is the message text string.
--   sender is the SimObject which sent the message.
function receiveTextMessage(message, sender)
end
</myScript>
			<myActionCategories></myActionCategories>
			<myShowInMenu>1</myShowInMenu>
			<myEncrypted>0</myEncrypted>
			<myScriptType>1</myScriptType>
			<myDoctrines></myDoctrines>
			<myFlags>1</myFlags>
			<myShowInToolbar>0</myShowInToolbar>
			<myToolbarLocation></myToolbarLocation>
			<myExtendedMenuText></myExtendedMenuText>
		</second>
	</item>
</ScenarioScripts>
</boost_serialization>

